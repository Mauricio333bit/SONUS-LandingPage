---
interface Props {
	tittle: string;
    subtittle: string;
	urlImg1: string;
    urlImg2: string;
    urlLinkNota: string;
    urlLinkClub:string;
    textDescription: string;
  content?: Node; // Prop para el contenido opcional
}

const { tittle,subtittle,urlImg1,urlImg2,urlLinkNota,urlLinkClub,textDescription,content } = Astro.props;
---

<!-- ============================================ -->
<!--                NOTA                -->
<!-- ============================================ -->

<section id="notas">
    <div class="nota-container my-auto">
        <div class="cs-image-group">
            <!--Top left image-->
            <picture class="cs-picture cs-picture1">
                
                <img loading="lazy" decoding="async" src={urlImg1} alt="mechanic" width="413" height="500">
            </picture>
            <!--Top Right image-->
            <picture class="cs-picture cs-picture2">
                
                <img loading="lazy" decoding="async" src={urlImg2} alt="mechanic" width="413" height="280">
            </picture>
        </div>
        <div class="cs-content gap-6">
            <a href={urlLinkClub}> <span class="dark:text-white text-4xl text-wrap font-extrabold">{tittle}</span></a>
            <h2 class="cs-topper">{subtittle}</h2>
            <p class="dark:text-cyan-50 text-[--bodyTextColor]">
                {textDescription}
            </p>
            <a href={urlLinkNota} class="cs-button-solid">View more</a>
            {content}
        </div>
    </div>
</section>

          
<style>
    /*-- -------------------------- -->
<---       Nota        -->
<--- -------------------------- -*/

/* Mobile - 360px */
@media only screen and (min-width: 0rem) {
  #notas {
    padding:1rem;
  }
  #notas .nota-container {
    width: 100%;
    /* changes to 1280px at desktop */
    max-width: 34.375rem;
    margin: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
    /* 48px - 64px */
    gap: clamp(3rem, 6vw, 4rem);
  }
  #notas .cs-content {
    /* set text align to left if content needs to be left aligned */
    text-align: left;
    width: 100%;
    max-width: 36.625rem;
    display: flex;
    flex-direction: column;
    /* centers content horizontally, set to flex-start to left align */
    align-items: flex-start;
  }
  #notas .cs-text {
    margin-bottom: 1rem;
  }
  #notas .cs-text:last-of-type,
  #reverse-nota .cs-text:last-of-type,
  #RTsbst-1594 .cs-text:last-of-type {
    margin-bottom: 2rem;
  }
  #notas .cs-button-solid {
    font-size: 1rem;
    /* 46px - 56px */
    line-height: clamp(2.875rem, 5.5vw, 3.5rem);
    text-decoration: none;
    font-weight: 700;
    text-align: center;
    margin: 0;
    color: #fff;
    min-width: 9.375rem;
    padding: 0 3rem;
    background-color: var(--primary);
    display: inline-block;
    position: relative;
    z-index: 1;
    /* prevents padding from adding to the width */
    box-sizing: border-box;
  }
  #notas .cs-button-solid:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 0%;
    background: var(--secondary);
    opacity: 1;
    top: 0;
    left: 0;
    z-index: -1;
    transition: width .3s;
  }
  #notas .cs-button-solid:hover:before {
    width: 100%;
  }
  #notas .cs-image-group {
    /* scales the whole group based on the view width size and stop when that vales equals .745em, resets at desktop */
    font-size: min(1.959vw, .745em);
    width: 39.375em;
    /* we set a minimum height so it never gets smaller than this value */
    min-height: 28em;
    display: block;
    position: relative;
    z-index: 1;
  }
  #notas .cs-picture {
    position: absolute;
  }
  #notas .cs-picture img{
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
  }
  #notas .cs-picture1 {
    /* the percentage heights allow them to be responsive to the height of the parent cs-image-group. On desktop, when the felxbox is set to aling-items: stretch, the cs-image group will stretch to fill the height of the parent container. So when you add more content to the cs-content group and make it taller, the cs-image group will get taller with it and every image will stretch with the parent, making this entire group responsive to the changing amounts of content next to it */
    width: 25.8125em;
    height: 79.617834%;
    top: 0;
    left: 0;
    z-index: -1;
  }
  #notas .cs-picture2 {
    width: 25.8125em;
    height: 44.585987%;
    bottom: 0;
    right: 0;
    z-index: 10;
  }
}
/* Tablet - 768px */
@media only screen and (min-width: 48rem) {
  #notas .nota-container {
    max-width: 80rem;
    flex-direction: row;
    justify-content: space-between;
    align-items: stretch;
  }
  #notas .cs-content {
    /* this padding sets a minimum gap between the top and bottom of the content div and the top and bottom of the cs-image-group */
    padding: 3.75rem 0;
    /* while the cs-image-group will stretch to fill the height of the parent, this property will ensure that the cs-content group aligns itse;f in the center of the parent div instead of stretching */
    align-self: center;
  }
  #notas .cs-image-group {
    font-size: min(1.2vw, 1em);
    flex: none;
  }
}
/* Dark Mode */
@media only screen and (min-width: 0rem) {
  body.dark-mode #notas .cs-title,
  body.dark-mode #notas .cs-text {
    color:white;
  }
  
}


                                
</style>